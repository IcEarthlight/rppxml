name: build

# trigger on push to master and release events
on:
  push:
    branches: [ master ]
  release:
    types: [ created ]

jobs:
  build_wheels:
    name: build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    # build matrix for different platforms
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['cp310', 'cp311', 'cp312', 'cp313']
      fail-fast: false  # continue with other builds even if one fails

    steps:
      # checkout the repository
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # setup python environment
      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # upgraded to 3.11 for cibuildwheel

      # install cibuildwheel
      - name: install cibuildwheel
        run: python -m pip install cibuildwheel

      # build wheels
      - name: build wheels
        env:
          CIBW_BUILD: ${{ matrix.python }}-*
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_BUILD_VERBOSITY: 3  # added for verbose output
        run: python -m cibuildwheel --output-dir wheelhouse --debug

      # store the built wheels as artifacts
      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python }}
          path: wheelhouse/*.whl
          retention-days: 5

  # publish to pypi when creating a release
  publish:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    # only run on release
    if: github.event_name == 'release'
    
    steps:
      # download all the wheels
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      # upload to github release
      - name: upload to github release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      # publish to pypi
      - name: publish to pypi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload dist/*.whl
