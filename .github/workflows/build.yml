name: build

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  build_wheels:
    name: build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_SKIP: "*-manylinux_i686"
          CIBW_BEFORE_BUILD: "pip install cmake ninja"
          CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"

      - name: upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: build sdist
        run: python -m build --sdist

      - name: upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    name: publish to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: prepare distribution files
        run: |
          mkdir -p dist_final
          find dist -type f -name "*.whl" -o -name "*.tar.gz" -exec cp {} dist_final/ \;

      - name: publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist_final/

      - name: create github release
        uses: softprops/action-gh-release@v1
        with:
          files: dist_final/*
          draft: false
          prerelease: false
          generate_release_notes: true 